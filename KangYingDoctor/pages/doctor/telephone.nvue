<template>
    <view class="box">
        <view v-if="CALL_STATE==4" style="flex:1;">
            <txtrtc_video_view class='video-view remote-view' ref="remoteVideoView"></txtrtc_video_view>
            <view class="bottom-outer">
                <txtrtc_video_view class='video-view local-view' ref="videoView"></txtrtc_video_view>
                <view class="handle-outer">
                    <view class="handle-buttons">
                        <view class="button" @click="hungupCalling">
                            <view class="button-style">
                                <text class="button-text" style="color: red;">挂断</text>
                            </view>
                        </view>
                        <view class="button" @click="muteCalling">
                            <view class="button-style">
                                <text class="button-text">{{ hasMuteCalling ? '继续' : '暂停' }}通话</text>
                            </view>
                        </view>
                    </view>
                    <view class="handle-buttons">
                        <view class="button" @click="muteLocalVideo">
                            <view class="button-style">
                                <text class="button-text">{{ hasMuteVideo ? '开启' : '关闭' }}摄像头</text>
                            </view>
                        </view>
                        <view class="button" @click="muteLocalAudio">
                            <view class="button-style">
                                <text class="button-text">{{ hasMuteAudio ? '开启' : '关闭' }}话筒</text>
                            </view>
                        </view>
                    </view>
                    <view class="handle-buttons">
                        <view class="button" @click="changeCamera">
                            <view class="button-style">
                                <text class="button-text">{{ cameraTypeStatus ? '前置' : '后置' }}</text>
                                <text class="button-text">摄像头</text>
                            </view>
                        </view>
                    </view>
                </view>
            </view>
        </view>
        <view class="wating" v-else>
            <view v-if="currentCall.targetUserID===userID">
                <view class="wating-tips" :style="`left:${watingWidth/2}px;`">
                    <text class="w-b-text">等待接听...</text>
                </view>
                <view class="w-button answer" @click="answerCalling">
                    <text class="w-b-text">接听</text>
                </view>
                <view class="w-button refuse" @click="refuseCalling">
                    <text class="w-b-text">拒绝</text>
                </view>
            </view>
            <view v-else>
                <view class="wating-tips" :style="`left:${watingWidth/2}px;`">
                    <text class="w-b-text">正在呼叫...</text>
                </view>
                <view class="w-button wating-answer" :style="`left:${watingWidth/2}px;`" @click="hungupCalling">
                    <text class="w-b-text">挂断</text>
                </view>
            </view>
        </view>
    </view>
</template>

<script>
//插件对象

import {
    mapGetters,
    mapActions
} from 'vuex'

import {SDK_APP_ID} from '../../common/config.js'

var sdkwx = uni.requireNativePlugin('TXTRTC-SdkWX');

export default {
    data() {
        return {
            // 等待界面
            watingHeight: 0,
            watingWidth: 0,

            // 铃声用
            innerAudioContext: {},

            // 通话中控制
            hasMuteAudio: false,
            hasMuteVideo: false,
            hasMuteCalling: false,

            cameraTypeStatus: true, // true前置 false后置
        }
    },
    watch: {
        REMOTE_CALL_STATE(state) {
            const _this = this
            switch (state) {
                case 2:
                    _this.remoteAnswer()
                    break
                case 3:
                    _this.remoteRefuse()
                    break
                case 5:
                    _this.remoteHungup()
                    break
                default:
                    break
            }
        }
    },
    onLoad() {
        this.startWatingAudio()
        uni.getSystemInfo({
            success: e => {
                this.watingWidth = e.windowWidth
                this.watingHeight = e.windowHeight
            }
        })

        //检查权限
        this.rePermission()

        //设置事件回调
        sdkwx.setListener((res) => {
            if (res.type == "onEnterRoom") {
                //进入房间回调
                console.log('进入房间')
            } else if (res.type == "onExitRoom") {
                //离开房间回调
                console.log('离开房间')
            } else if (res.type == "onUserVideoAvailable") {
                //远端用户视频可用回调
                this.onUserVideoAvailable(res.data);
            }
        })
    },
    onBackPress(options) {
        if (options.from === 'navigateBack') {
            return false
        }

        uni.showModal({
            title: '提示',
            content: '将结束通话，是否确定？',
            success: e => {
                if (e.confirm) {
                    this.hungupCalling()
                }
            }
        })

        return true
    },
    beforeDestroy() {
        this.UPDATE_CALL_STATE(0)
        this.UPDATE_REMOTE_CALL_STATE(0)
        this.UPDATE_CURRENT_CALL({})
        this.stopWatingAudio()
    },
    methods: {
        startWatingAudio() {
            const innerAudioContext = uni.createInnerAudioContext();
            innerAudioContext.autoplay = true;
            innerAudioContext.loop = true;
            innerAudioContext.src = 'http://localhost/static/telephone.wav';
            innerAudioContext.onPlay(() => {
                console.log('开始播放');
            });
            innerAudioContext.onError((res) => {
                console.log(res.errMsg);
                console.log(res.errCode);
            });
            this.innerAudioContext = innerAudioContext
        },
        stopWatingAudio() {
            try {
                if (this.innerAudioContext) {
                    this.innerAudioContext && this.innerAudioContext.stop()
                    this.innerAudioContext && this.innerAudioContext.destroy()
                }
            } catch (e) {
                console.log('err:', e)
            }
        },
        //远端接听
        remoteAnswer() {
            this.UPDATE_CALL_STATE(4) // 设置为通话中
            this.enterRoom()
            this.stopWatingAudio()
        },
        //远端拒绝
        remoteRefuse() {
            uni.navigateBack()
            this.stopWatingAudio()
        },
        //远端挂断
        remoteHungup() {
            this.exitRoom()
        },
        //本地接听
        answerCalling() {
            // 接听电话
            this.UPDATE_CALL_STATE(2).then(() => {
                // 应答后设置本地为通话中
                this.UPDATE_CALL_STATE(4).then(() => {
                    this.enterRoom()
                })
            })
            this.stopWatingAudio()
        },
        //本地拒绝
        refuseCalling() {
            this.UPDATE_CALL_STATE(3)
            uni.navigateBack()
        },
        //本地挂断
        hungupCalling() {
            this.UPDATE_CALL_STATE(5)
            this.exitRoom()
            this.stopWatingAudio()
        },
        rePermission() {
            sdkwx.checkPermission(function (res) {
                console.log(res);
            })
        },
        onUserVideoAvailable(data) {
            var userId = data.userId;
            var available = data.available;

            var remoteVideoView = this.$refs.remoteVideoView;
            if (available && remoteVideoView) {
                remoteVideoView.startRemoteView(userId);
            } else {
                remoteVideoView.stopRemoteView(userId);
            }
        },
        muteCalling() {
            this.hasMuteCalling = !this.hasMuteCalling

            this.muteLocalAudio()
            this.muteLocalVideo()
        },
        muteLocalVideo() {
            this.hasMuteVideo = !this.hasMuteVideo
            sdkwx.muteLocalVideo()
            if (!this.hasMuteVideo) {
                //开始视频
                const videoView = this.$refs.videoView;
                videoView && videoView.startLocalPreview(true);
            } else {
                //开始视频
                const videoView = this.$refs.videoView;
                videoView && videoView.stopLocalPreview(true);
            }
        },
        muteLocalAudio() {
            this.hasMuteAudio = !this.hasMuteAudio
            sdkwx.muteLocalAudio()
            if (!this.hasMuteAudio) {
                sdkwx.startLocalAudio()
            } else {
                sdkwx.stopLocalAudio()
            }
        },
        enterRoom() {
            setTimeout(() => {
                const scene = 0; //视频通话 = 0;视频互动直播 = 1;语音通话 = 2;语音互动直播 = 3;
                sdkwx.enterRoom({
                    sdkAppId: SDK_APP_ID,
                    roomId: this.currentCall.roomId, // 主叫ID作为roomId，只能为数字或者可转化为数字
                    role: 20, //20主播 21 观众
                    userId: this.userID,
                    userSig: this.userSig
                }, scene)
                setTimeout(() => {
                    this.startVideo()
                })
            })
        },
        startVideo() {
            this.stopVideo()

            setTimeout(() => {
                // //设置角色主播
                // sdkwx.switchRole(20); //20主播 21 观众

                //开启音频
                sdkwx.startLocalAudio();

                //开始视频
                const videoView = this.$refs.videoView;
                videoView.startLocalPreview(true);
            })
        },
        changeCamera() {
            this.cameraTypeStatus = !this.cameraTypeStatus
            const videoView = this.$refs.videoView;
            videoView.stopLocalPreview();
            videoView.startLocalPreview(this.cameraTypeStatus);
        },
        stopLocalPreview() {
            //停止音频
            sdkwx.stopLocalAudio();

            //停止视频
            const videoView = this.$refs.videoView;
            videoView.stopLocalPreview();
        },
        stopVideo() {
            // //设置角色观众
            // sdkwx.switchRole(20); //20主播 21 观众

            //停止音频
            sdkwx.stopLocalAudio();

            //停止视频
            var videoView = this.$refs.videoView;
            videoView && videoView.stopLocalPreview();
        },
        exitRoom() {
            this.stopVideo()
            //退出房间
            sdkwx.exitRoom()
            uni.navigateBack()
        },
        ...mapActions(['UPDATE_CALL_STATE', 'UPDATE_REMOTE_CALL_STATE', 'UPDATE_CURRENT_CALL'])
    },
    computed: {
        ...mapGetters(['userInfo', 'CALL_STATE', 'REMOTE_CALL_STATE', 'userSig', 'userID', 'currentCall'])
    }
}
</script>
<style lang="scss">
.box {
    flex: 1;
}

.buttons {
    position: fixed;
    top: 100px;
}

.button {
    width: 100px;
    color: red;
}

.video-view {
}

.remote-view {
    // background-color: green;
    flex: 8;

}

.bottom-outer {
    flex: 2;
    flex-direction: row;
}

.local-view {
    // background-color: red;
    flex: 3;
    //min-width: 200px;
}

.handle-outer {
    flex: 7;
    justify-content: center;
    flex-direction: row;
    //align-items: center;
}

.handle-buttons {
    flex: 1;
}

.button {
    flex: 1;
    padding: 8px 10px;
}

.button-style {
    flex: 2;
    justify-content: center;
    align-items: center;
    background-color: $base-color;
    box-shadow: 0px 0px 19px 1px rgba(112, 216, 201, 0.1);
    background-image: linear-gradient(114deg, #70d8c9 0%, $base-color 74%);
}

.button:active {
    opacity: .5;
}

.button-text {
    font-size: 14px;
    color: #666666;
}

.wating {
    position: fixed;
    background-color: $base-color;
    justify-content: center;
    align-items: center;
}

.w-button {
    position: fixed;
    bottom: 100px;
    width: 100px;
    height: 40px;
    border-color: rgba(255,255,255,.5);
    border-style: solid;
    border-width: 1px;
    border-radius: 4px;
    justify-content: center;
    align-items: center;
    box-shadow: 0px 0px 19px 1px rgba(255, 255, 255, .4);
    background-color: #E80505;
}

.answer {
    right: 50px;
    background-color: #49C628;
}

.refuse {
    left: 50px;
    background-color: #E80505;
}

.wating-answer {
    transform: translateX(-50%);
    position: fixed;
}

.wating-tips {
    transform: translateX(-50%);
    position: fixed;
    bottom: 400px;
    border-width: 0;
}

.w-b-text {
    color: #eeeeee;
    font-size: 14px;
}
</style>
