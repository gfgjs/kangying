<template>
    <view class="box">
        <view style="flex:1;" v-if="windowStatus===1">
            <txtrtc_video_view class='video-view remote-view' ref="remoteVideoView"></txtrtc_video_view>
            <view class="bottom-outer">
                <txtrtc_video_view class='video-view local-view' ref="videoView"></txtrtc_video_view>
                <view class="handle-outer">
                    <view class="handle-buttons">
                        <view class="button" @click="exitRoom">
                            <text class="button-text" style="color: red;">挂断</text>
                        </view>
                        <view class="button" @click="">
                            <text class="button-text">凯筒通话</text>
                        </view>
                    </view>
                    <view class="handle-buttons">
                        <view class="button">
                            <text class="button-text">筒摄像头</text>
                        </view>
                        <view class="button">
                            <text class="button-text">凯斯话筒</text>
                        </view>
                    </view>
                    <view class="handle-buttons">
                        <view class="button">
                            <text class="button-text">前置</text>
                            <text class="button-text">摄像头</text>
                        </view>
                    </view>
                </view>
            </view>
        </view>
        <view class="wating" v-if="windowStatus===0" @click="windowStatus=1">
            <view class="w-button wating-tips" >
                <text class="w-b-text">等待接听...</text>
            </view>
            <view class="w-button answer" @click="">
                <text class="w-b-text">接听</text>
            </view>
            <view class="w-button refuse" @click="">
                <text class="w-b-text">拒绝</text>
            </view>
        </view>
    </view>
</template>

<script>
//插件对象

import {SDK_APP_ID} from "../../common/config";

import {
    mapGetters,
    mapActions
} from 'vuex'

import {
    request_getUserSig
} from '../../common/https.js'

var sdkwx = uni.requireNativePlugin('TXTRTC-SdkWX');

export default {
    data() {
        return {
            remoteVideoHeight: 0,
            sdkAppId: 1400440995,
            roomId: '',
            vvh: 100,
            localUserId: '',
            localUserSig: '',
            remoteUserId: '',
            remoteUserSig: '',
            watingStatus: true,
            ptop: 0,
            watingHeight: 0,
            watingWidth: 0,

            callInfo: {},
            innerAudioContext: {},

            hasMuteAudio: false,
            hasMuteVideo: false,
            hasMuteCalling: false,

            windowStatus: 0
        }
    },

    // onBackPress(options) {
    // 	if (options.from === 'navigateBack') {
    // 		return false
    // 	}

    // 	uni.showModal({
    // 		title: '提示',
    // 		content: '将结束通话，是否确定？',
    // 		success: e => {
    // 			if (e.confirm) {
    // 				this.hungupCalling()
    // 			}
    // 		}
    // 	})

    // 	return true
    // },
    watch:{
      windowStatus(e){

          e&&this.enterRoom()
      }
    },
    onLoad(o) {
        uni.getSystemInfo({
            success: e => {
                this.watingWidth = e.windowWidth
                this.watingHeight = e.windowHeight
            }
        })

        // this.callInfo = o

        // this.roomId = o.recordId // 病例Id作为房间Id
        // this.localUserId = o[o.role + 'Id'] // 本机账号
        // this.remoteUserId = o[o.remoteRole + 'Id']

        //预加载签名
        // this.checkSig()

        //检查权限
        sdkwx.checkPermission(function (res) {
            console.log(res);
        });

        // 设置事件回调
        sdkwx.setListener((res) => {
            console.log(res)

            if (res.type == "onEnterRoom") {
                //进入房间回调

            } else if (res.type == "onExitRoom") {
                //离开房间回调

            } else if (res.type == "onSwitchRole") {
                //角色转换回调

            } else if (res.type == "onUserVideoAvailable") {
                //远端用户视频可用回调
                this.onUserVideoAvailable(res.data);
            }
        })

    },
    beforeDestroy(){
      this.exitRoom()
    },
    methods: {
        rePermission() {
            sdkwx.checkPermission(function (res) {
                console.log(res);
            });
        },
        onUserVideoAvailable(data) {
            var userId = data.userId;
            var available = data.available;

            var remoteVideoView = this.$refs.remoteVideoView;
            if (available) {
                // this.remoteVideoHeight = 300;
                remoteVideoView.startRemoteView(userId);
            } else {
                // this.remoteVideoHeight = 0;
                remoteVideoView.stopRemoteView(userId);
            }
        },
        enterRoom(id) {
            const us = Date.now()
            request_getUserSig({
                uni,
                data: {
                    userId: us
                }
            }).then(res => {
                var scene = 0; //视频通话 = 0;视频互动直播 = 1;语音通话 = 2;语音互动直播 = 3;
                sdkwx.enterRoom({
                    sdkAppId: SDK_APP_ID,
                    roomId: 11111, // 只能为数字或者可转化为数字
                    role: 20, //20主播 21 观众
                    userId: us,
                    userSig: res.data
                }, scene)

                this.startVideo()
            })
        },
        startVideo() {
            this.stopVideo()
            console.log('=========')

            setTimeout(() => {
                // //设置角色主播
                // sdkwx.switchRole(20); //20主播 21 观众

                //开启音频
                sdkwx.startLocalAudio();

                //开始视频
                var videoView = this.$refs.videoView;
                videoView.startLocalPreview(true);
            })
        },
        stopLocalPreview() {
            //停止音频
            sdkwx.stopLocalAudio();

            //停止视频
            var videoView = this.$refs.videoView;
            videoView.stopLocalPreview();
        },
        stopVideo() {
            // //设置角色观众
            // sdkwx.switchRole(20); //20主播 21 观众

            //停止音频
            sdkwx.stopLocalAudio();

            //停止视频
            var videoView = this.$refs.videoView;
            videoView && videoView.stopLocalPreview();
        },
        exitRoom() {
            this.stopVideo()
            //退出房间
            sdkwx.exitRoom()
        },
        createGroup() {

        },
        joinGroup() {
        },
    },
    computed: {
    }
}
</script>
<style lang="scss">
.box {
    flex: 1;
}

.buttons {
    position: fixed;
    top: 100px;
}

.button {
    width: 100px;
    color: red;
}

.video-view {
}

.remote-view {
    // background-color: green;
    flex: 8;

}

.bottom-outer {
    flex: 2;
    flex-direction: row;
}

.local-view {
    // background-color: red;
    flex: 3;
    //min-width: 200px;
}

.handle-outer {
    flex: 7;
    justify-content: center;
    flex-direction: row;
    //align-items: center;
}

.handle-buttons {
    flex:1;
    flex-direction: column;
    justify-content: center;
}

.button {
    flex: 1;
    margin: 4px;
}

.button:active {
    opacity: .5;
}

.button-text {
    font-size: 14px;
    flex-direction: column;
}

.wating {
    position: fixed;
    background-color: $base-color;
    // flex-direction: row;
    justify-content: center;
    align-items: center;
}

// .w-buttons {
// 	height: 100px;
// 	width: 300px;
// 	background-color: red;
// }

.w-button {
    // height: 100px;
    // width: 300px;
    position: fixed;
    bottom: 100px;
    width: 100px;
    height: 40px;
    border-color: white;
    border-style: solid;
    border-width: 1px;
    border-radius: 4px;
    justify-content: center;
    align-items: center;
    // background-color: red;
}

.answer {
    right: 50px;
    border-color: green;
}

.refuse {
    left: 50px;
    border-color: red;
}

.wating-answer {
    transform: translateX(-50%);
    position: fixed;
}

.wating-tips {
    transform: translateX(-50%);
    position: fixed;
    bottom: 400px;
    border-width: 0;
}

.w-b-text {
    color: white
}
</style>
